/*
 * $Id$
 *
 * Copyright (C) 2003 ETC s.r.o.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *
 * Written by Matan Ziv-Av <matan@svgalib.org>, 2003.
 * Modified by Marcel Telka <marcel@telka.sk>, 2003.
 *
 */

#include <sysdep.h>

#include <stdint.h>
#include <stdlib.h>
#include <string.h>

#include <urjtag/part.h>
#include <urjtag/bus.h>
#include <urjtag/chain.h>
#include <urjtag/bssignal.h>

#include "buses.h"
#include "generic_bus.h"

typedef struct
{
  urj_part_signal_t *a[26];
  urj_part_signal_t *d[32];
  urj_part_signal_t *cs[8];
  urj_part_signal_t *we[4];
  urj_part_signal_t *rdwr;
  urj_part_signal_t *rd;
  urj_part_signal_t *bs;
  urj_part_signal_t *ale;
  urj_part_signal_t *cle;
} bus_params_t;

uint32_t LAST_ADDR;

#define A       ((bus_params_t *) bus->params)->a
#define D       ((bus_params_t *) bus->params)->d
#define CS      ((bus_params_t *) bus->params)->cs
#define WE      ((bus_params_t *) bus->params)->we
#define RDWR    ((bus_params_t *) bus->params)->rdwr
#define RD      ((bus_params_t *) bus->params)->rd
#define BS      ((bus_params_t *) bus->params)->bs
#define ALE     ((bus_params_t *) bus->params)->ale
#define CLE     ((bus_params_t *) bus->params)->cle

/**
 * bus->driver->(*new_bus)
 *
 */
static urj_bus_t *
sh7751r_bus_new (urj_chain_t *chain, const urj_bus_driver_t *driver,
		const urj_param_t *cmd_params[])
{
	urj_bus_t *bus;
	urj_part_t *part;
	char buff[10];
	int i;
	int failed = 0;

	bus = urj_bus_generic_new (chain, driver, sizeof (bus_params_t));
	if (bus == NULL)
		return NULL;
	part = bus->part;
	/* address */
	for (i = 0; i < 26; i++)
	{
		sprintf (buff, "A%d", i);
		failed |= urj_bus_generic_attach_sig (part, &(A[i]), buff);
	}
	/* data */
	for (i = 0; i < 32; i++)
	{
		sprintf (buff, "D%d", i);
		failed |= urj_bus_generic_attach_sig (part, &(D[i]), buff);
	}
	/* chip select */
	for (i = 0; i < 7; i++)
	{
		sprintf (buff, "CS%d", i);
		failed |= urj_bus_generic_attach_sig (part, &(CS[i]), buff);
	}
	/* write enable */
	for (i = 0; i < 4; i++)
	{
		sprintf (buff, "WE%d", i);
		failed |= urj_bus_generic_attach_sig (part, &(WE[i]), buff);
	}

	failed |= urj_bus_generic_attach_sig (part, &(RDWR), "RD_WR");

	failed |= urj_bus_generic_attach_sig (part, &(RD), "RD_CASS_FRAME");

	failed |= urj_bus_generic_attach_sig (part, &(ALE), "MD0_SCK2");

	failed |= urj_bus_generic_attach_sig (part, &(CLE), "SCK");

	failed |= urj_bus_generic_attach_sig (part, &(BS), "BS");

	if (failed)
	{
		urj_bus_generic_free (bus);
		return NULL;
	}

	return bus;
}

/**
 * bus->driver->(*printinfo)
 *
 */
static void
sh7751r_bus_printinfo (urj_log_level_t ll, urj_bus_t *bus)
{
	int i;

	for (i = 0; i < bus->chain->parts->len; i++)
		if (bus->part == bus->chain->parts->parts[i])
			break;
	urj_log (ll, _("Hitachi SH7751R compatible bus driver via BSR (JTAG part No. %d)\n"),
			i);
}

/**
 * bus->driver->(*area)
 *
 */

typedef struct {
	urj_bus_area_t area;
	unsigned int cs;
	unsigned int lines;
	unsigned int re_we_strobes;
	unsigned int wr_flags;
} sh7751r_area_t;

static const sh7751r_area_t sh7751r_areas[] = {
		{ { N_("EEPROM"), 0x00000000, 0x04000000, 8  }, 0, 32,0,0 },
		{ { N_("unknown"), 0x04000000, 0x04000000, 32  }, 1, 32,1,1 },
		{ { N_("NAND"), 0x08000000, 0x04000000, 8  }, 2, 32,1,1 },
		{ { N_("RAM"), 0x0C000000, 0x04000000, 32  }, 3, 32,0,0 },
		{ { N_("Something"), 0x10000000, 0x04000000, 16  }, 4, 32,1,1 },
		{ { N_("Flash5"), 0x14000000, 0x04000000, 32  }, 5, 32,1,1 },
		{ { N_("Flash6"), 0x18000000, 0x04000000, 32  }, 6, 32,1,1 },
		{ { N_("other"), 0x1C000000, 0xE0000000, 8  }, 2, 32,1,1 },
		{ { N_("registers"), 0xFC000000, 0x04000000, 32 }, 7, 32,0,0 },
};

static const sh7751r_area_t *
find_area (urj_bus_t *bus, uint32_t adr)
{
	unsigned int i;

	for (i = 0; i < ARRAY_SIZE(sh7751r_areas); ++i)
	{
		const sh7751r_area_t *area = &sh7751r_areas[i];
		if (adr >= area->area.start &&
				adr < area->area.start + area->area.length)
			return area;
	}

	return NULL;
}

static int
sh7751r_bus_area (urj_bus_t *bus, uint32_t adr, urj_bus_area_t *area)
{
	const sh7751r_area_t *sh7751r_area;

	sh7751r_area = find_area(bus, adr);
	if (sh7751r_area==NULL)
		return URJ_STATUS_FAIL;

	*area= sh7751r_area->area;

	return URJ_STATUS_OK;
}

static void
setup_address (urj_bus_t *bus, const sh7751r_area_t *area, uint32_t a)
{
	int i;
	urj_part_t *p = bus->part;

	for (i = 0; i < area->lines; i++)
		urj_part_set_signal (p, A[i], 1, (a >> i) & 1);
}

static void
set_data_in (urj_bus_t *bus, const sh7751r_area_t *area)
{
	int i;
	urj_part_t *p = bus->part;

	for (i = 0; i < area->lines; i++)
		urj_part_set_signal_input (p, D[i]);
}

static void
setup_data (urj_bus_t *bus, const sh7751r_area_t *area, uint32_t d)
{
	int i;
	urj_part_t *p = bus->part;

	for (i = 0; i < area->area.width; i++)
	  urj_part_set_signal (p, D[i], 1, (d >> (area->area.width -i -1)) & 1);
}

static uint32_t
get_data(urj_bus_t *bus, const sh7751r_area_t *area)
{
	unsigned int i;
	uint32_t d = 0;

	for (i = area->area.width; i > 0; i--)
	{
		d <<= 1;
		d |= urj_part_get_signal (bus->part, D[i-1]) ? 1 : 0;
	}

	return d;
}

/**
 * bus->driver->(*read_start)
 *
 */
 static int
 sh7751r_bus_read_start (urj_bus_t *bus, uint32_t adr)
 {
	 const sh7751r_area_t *area;
	 urj_part_t *p = bus->part;

	 area=find_area (bus, adr);


	 /* set the signals for the appropriate memory segment TODO finish this*/
	 if(area->cs!=32) //hack for dealing with memory that doesnt require cs
	   urj_part_set_signal (p, CS[area->cs], 1, 0);
	 urj_part_set_signal_high (p, RDWR);
	 urj_part_set_signal_high (p, WE[0]);
	 urj_part_set_signal_high (p, WE[1]);
	 urj_part_set_signal_high (p, WE[2]);
	 urj_part_set_signal_high (p, WE[3]);
	 urj_part_set_signal_low (p, RD);
	 urj_part_set_signal_low (p, BS); //TODO not sure if this is correct
	 setup_address (bus, area, adr);
	 set_data_in (bus, area);
	 urj_tap_chain_shift_data_registers (bus->chain, 0);
	 
	 return URJ_STATUS_OK;
 }

 /**
  * bus->driver->(*read_next)
  *
  */
 static uint32_t
 sh7751r_bus_read_next (urj_bus_t *bus, uint32_t adr)
 {
	 uint32_t d = 0;
	 const sh7751r_area_t *area;
	 area = find_area(bus, adr);

	 //if we need to strobe to get data
	 if (area->re_we_strobes){
	   urj_part_set_signal(bus->part,BS,1,1);
	   urj_part_set_signal(bus->part,RD,1,0);
	   urj_tap_chain_shift_data_registers(bus->chain, 1);
	   urj_part_set_signal(bus->part,RD,1,1);
	   urj_part_set_signal(bus->part,BS,1,0);
	 }

	 setup_address (bus, area, adr);
	 urj_tap_chain_shift_data_registers (bus->chain, 1);

	 // for (i = 0; i < 32; i++)
	 //    d |= (uint32_t) (urj_part_get_signal (p, D[i]) << i);

	 d = get_data(bus,area);
	 LAST_ADDR = adr;
	 return d;
 }

 /**
  * bus->driver->(*read_end)
  *
  */
 static uint32_t
 sh7751r_bus_read_end (urj_bus_t *bus)
 {
	 urj_part_t *p = bus->part;
	 const sh7751r_area_t *area;

	 area= find_area (bus,LAST_ADDR);
	 uint32_t d = 0;

	 //if we need to strobe to get data
	 if (area->re_we_strobes){
		 urj_part_set_signal(bus->part,RD,1,0);
		 urj_part_set_signal(bus->part,BS,1,1);
		 urj_tap_chain_shift_data_registers(bus->chain, 1);
	 }
	 if (area->cs!=32) //hack to support non cs areas
	   urj_part_set_signal (bus->part, CS[area->cs], 1,1);
	 urj_part_set_signal_low (p, RD);
	 urj_tap_chain_shift_data_registers (bus->chain, 1);

	 //for (i = 0; i < 32; i++)
	 //    d |= (uint32_t) (urj_part_get_signal (p, D[i]) << i);

	 d = get_data(bus, area);
	 
	 //urj_part_set_signal_high (p, RD);
	 urj_tap_chain_shift_data_registers (bus->chain, 1);

	 return d;
 }

 static void
 sh7751r_bus_write_flags(urj_bus_t *bus, uint32_t adr, uint32_t data,
		 uint32_t set_ale, uint32_t set_cle, uint32_t hold_cs)
 {
	 const sh7751r_area_t *area;
	 area = find_area (bus, adr);
	 if (area->cs!=32)
	   urj_part_set_signal (bus->part, CS[area->cs], 1, 0);
	 uint32_t WE_to_use = 4; //area->lines /8 ; //Set WE only on the lines that we use

	 //urj_part_set_signal (bus->part, nBCTL0, 1, 1);
	 //urj_part_set_signal (bus->part, nBCTL1, 1, 0);

	 urj_part_set_signal (bus->part, ALE, 1, set_ale);
	 urj_part_set_signal (bus->part, CLE, 1, set_cle);
	 setup_address (bus, area, adr);
	 setup_data (bus, area, data);


	 urj_tap_chain_shift_data_registers (bus->chain, 0);
	 for (uint32_t i=0; i<WE_to_use;i++)
	   urj_part_set_signal (bus->part, WE[i], 1, 0);
	 urj_part_set_signal (bus->part, BS, 1, 1);
	 
	 urj_tap_chain_shift_data_registers (bus->chain, 0);
	 
	 for (uint32_t i=0; i<WE_to_use;i++)
	   urj_part_set_signal (bus->part, WE[i], 1, 1);
	 urj_part_set_signal (bus->part, BS, 1, 0);
	 
	 if(area->re_we_strobes) {
		 urj_tap_chain_shift_data_registers (bus->chain, 0);
		 set_data_in (bus, area);
	 }
	 if (area->cs!=32) //hack
	   urj_part_set_signal (bus->part, CS[area->cs], 1, !hold_cs);
	 //urj_part_set_signal (bus->part, nBCTL0, 1, 1);
	 //urj_part_set_signal (bus->part, nBCTL1, 1, 1);
	 urj_part_set_signal (bus->part, ALE, 1, 0);
	 urj_part_set_signal (bus->part, CLE, 1, 0);
	 urj_part_set_signal(bus->part,BS,1,1);
	 urj_tap_chain_shift_data_registers (bus->chain, 0);
 }

 /**
  * bus->driver->(*write)
  *
  */
 static void
 sh7751r_bus_write (urj_bus_t *bus, uint32_t adr, uint32_t data)
 {
   //	 urj_chain_t *chain = bus->chain;
	 urj_part_t *p = bus->part;
	 const sh7751r_area_t *area;
	 uint32_t set_ale, set_cle, hold_cs;
	 area=find_area(bus, adr);

	 set_ale= 0;
	 set_cle=0;
	 hold_cs = 0;

	 if (area->wr_flags) {
	 set_ale = (adr >> 2) & 0x01;
	 set_cle = (adr >> 1) & 0x01;
	 hold_cs = adr & 0x01;
	 }

	 urj_part_set_signal_low (p, RDWR);
	 urj_part_set_signal_high (p, RD);

	 setup_address (bus,area, adr);
	 setup_data (bus, area, data);
	 sh7751r_bus_write_flags(bus, adr, data,set_ale,set_cle,hold_cs);

 }

 const urj_bus_driver_t urj_bus_sh7751r_bus = {
		 "sh7751r",
		 N_("Hitachi SH7751R compatible bus driver via BSR"),
		 sh7751r_bus_new,
		 urj_bus_generic_free,
		 sh7751r_bus_printinfo,
		 urj_bus_generic_prepare_extest,
		 sh7751r_bus_area,
		 sh7751r_bus_read_start,
		 sh7751r_bus_read_next,
		 sh7751r_bus_read_end,
		 urj_bus_generic_read,
		 urj_bus_generic_write_start,
		 sh7751r_bus_write,
		 urj_bus_generic_no_init,
		 urj_bus_generic_no_enable,
		 urj_bus_generic_no_disable,
		 URJ_BUS_TYPE_PARALLEL,
 };
